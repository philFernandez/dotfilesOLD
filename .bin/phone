#!/usr/local/bin/python3
from Contact import *
import shelve
import argparse
import re


def main():
    db = shelve.open('/Users/philthy/.bin/address_book_db')
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--add")
    parser.add_argument("-s", "--search")
    parser.add_argument("-c", "--contains")
    parser.add_argument("-d", "--delete")
    args = parser.parse_args()
    if args.add:
        newContact = addContact(args.add)
        db[newContact.name] = newContact
    elif args.search:
        try:
            print(db[args.search])
        except KeyError:
            searchAddressBookStartsWith(args.search, db)
    elif args.contains:
        searchAddressBookContains(args.contains, db)
    elif args.delete:
        del db[args.delete]
        print(f"{args.delete} deleted")
    else:
        showKeys(db)

    db.close()


def searchAddressBookStartsWith(searchKey, db):
    # set flag  to know whether or not search hit or missed
    found = False
    for contact in db.keys():
        if contact.startswith(searchKey):
            print(db[contact])
            # if search hit set flag to true
            found = True
    # if no search hit tell user
    if not found:
        print(f"No results for {searchKey}")


def searchAddressBookContains(searchKey, db):
    for contact in db:
        if searchKey in contact:
            print(db[contact])


def showKeys(db):
    for contacts in list(db.keys()):
        print(db[contacts])


def addContact(name):
    phoneNumber = validatePhoneNumber(input("Enter Phone Number: "))
    newContact = Contact(name, phoneNumber)
    return newContact


def validatePhoneNumber(phoneNumber):
    regex = "^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$"
    if re.search(regex, phoneNumber):
        return re.sub(regex, r'(\1) \2-\3', phoneNumber)
    else:
        print('ERROR: Malformed Phone Number')


main()
